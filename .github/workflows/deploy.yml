name: Deploy

on:
  push:
    branches: 
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
        
    - name: Cache Next.js build
      uses: actions/cache@v3
      with:
        path: |
          frontend/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('frontend/package-lock.json') }}-${{ hashFiles('frontend/**.[jt]s', 'frontend/**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('frontend/package-lock.json') }}-
          ${{ runner.os }}-nextjs-
        
    - name: Create Environment Files
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "${{ secrets.PROD_ENV }}" > .env.production
          echo "${{ secrets.PROD_ENV_FRONTEND }}" > frontend/.env.production
          echo "${{ secrets.PROD_ENV_BACKEND }}" > backend/.env.production
        else
          echo "${{ secrets.STAGING_ENV }}" > .env.staging
          echo "${{ secrets.STAGING_ENV_FRONTEND }}" > frontend/.env.staging
          echo "${{ secrets.STAGING_ENV_BACKEND }}" > backend/.env.staging
        fi
        
    - name: Install Dependencies
      run: |
        # Frontend dependencies
        cd frontend
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install
        
        # Backend dependencies
        cd ../backend
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install
        
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
        
    - name: Build Backend
      run: |
        cd backend
        # Ensure Prisma schema is available
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "production" ]]; then
          cp .env.production .env
        else
          cp .env.staging .env
        fi
        # Generate Prisma client and build
        npm run build
        
    - name: Deploy to Staging
      if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
      env:
        SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        HOST: ${{ secrets.STAGING_HOST }}
        USERNAME: ${{ secrets.STAGING_USERNAME }}
      run: |
        echo "$SSH_KEY" > deploy_key
        chmod 600 deploy_key
        
        mkdir -p ~/.ssh
        ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
        
        # Deploy and restart containers
        ssh -i deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USERNAME@$HOST << 'EOF'
          cd ~/veganeiro-webapp
          docker-compose -f docker-compose.staging.yml down
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
        EOF
        
        rm -f deploy_key

    - name: Deploy to Production
      if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
      env:
        SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        HOST: ${{ secrets.PRODUCTION_HOST }}
        USERNAME: ${{ secrets.PRODUCTION_USERNAME }}
      run: |
        echo "$SSH_KEY" > deploy_key
        chmod 600 deploy_key
        
        mkdir -p ~/.ssh
        ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
        
        # Deploy and restart containers
        ssh -i deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USERNAME@$HOST << 'EOF'
          cd ~/veganeiro-webapp
          docker-compose -f docker-compose.production.yml down
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d
        EOF
        
        rm -f deploy_key
